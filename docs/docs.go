// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "shreve"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/ecshreve/jepp/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/category": {
            "get": {
                "description": "get categories with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Fetch categories",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If exists or true, returns ` + "`" + `limit` + "`" + ` random records.",
                        "name": "random",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "If exists, returns the record with the given id.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit the number of records returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        },
        "/clue": {
            "get": {
                "description": "get clues with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Fetch Clues",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If exists or true, returns ` + "`" + `limit` + "`" + ` random records.",
                        "name": "random",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "If exists, returns the record with the given id.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by Game ID",
                        "name": "game",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by Category ID",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit the number of records returned",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Clue"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        },
        "/game": {
            "get": {
                "description": "get games with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "api"
                ],
                "summary": "Fetch Games",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If exists or true, returns ` + "`" + `limit` + "`" + ` random records.",
                        "name": "random",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "If exists, returns the record with the given id.",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit the number of records returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Game"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Category": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer",
                    "example": 765
                },
                "name": {
                    "type": "string",
                    "example": "State Capitals"
                }
            }
        },
        "models.Clue": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string",
                    "example": "This is the answer."
                },
                "categoryId": {
                    "type": "integer",
                    "example": 3462
                },
                "clueId": {
                    "type": "integer",
                    "example": 804002032
                },
                "gameId": {
                    "type": "integer",
                    "example": 8040
                },
                "question": {
                    "type": "string",
                    "example": "This is the question."
                }
            }
        },
        "models.Game": {
            "type": "object",
            "properties": {
                "gameDate": {
                    "type": "string",
                    "example": "2019-01-01"
                },
                "gameId": {
                    "type": "integer",
                    "example": 8040
                },
                "seasonId": {
                    "type": "integer",
                    "example": 38
                },
                "showNum": {
                    "type": "integer",
                    "example": 4532
                },
                "tapedDate": {
                    "type": "string",
                    "example": "2019-01-01"
                }
            }
        },
        "utils.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Jepp API Documentation",
	Description:      "This is a simple api to access jeopardy data.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
