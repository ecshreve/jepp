directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Category implements Node {
  id: ID!
  name: String!
}
"""A connection to a list of items."""
type CategoryConnection {
  """A list of edges."""
  edges: [CategoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Category connections"""
input CategoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Categories."""
  field: CategoryOrderField!
}
"""Properties by which Category connections can be ordered."""
enum CategoryOrderField {
  ID
  NAME
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
}
type Clue implements Node {
  id: ID!
  question: String!
  answer: String!
  category: Category!
  game: Game!
}
"""A connection to a list of items."""
type ClueConnection {
  """A list of edges."""
  edges: [ClueEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ClueEdge {
  """The item at the end of the edge."""
  node: Clue
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Clue connections"""
input ClueOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Clues."""
  field: ClueOrderField!
}
"""Properties by which Clue connections can be ordered."""
enum ClueOrderField {
  ID
  QUESTION
  ANSWER
  CATEGORY_NAME
}
"""
ClueWhereInput is used for filtering Clue objects.
Input was generated by ent.
"""
input ClueWhereInput {
  not: ClueWhereInput
  and: [ClueWhereInput!]
  or: [ClueWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """question field predicates"""
  question: String
  questionNEQ: String
  questionIn: [String!]
  questionNotIn: [String!]
  questionGT: String
  questionGTE: String
  questionLT: String
  questionLTE: String
  questionContains: String
  questionHasPrefix: String
  questionHasSuffix: String
  questionEqualFold: String
  questionContainsFold: String
  """answer field predicates"""
  answer: String
  answerNEQ: String
  answerIn: [String!]
  answerNotIn: [String!]
  answerGT: String
  answerGTE: String
  answerLT: String
  answerLTE: String
  answerContains: String
  answerHasPrefix: String
  answerHasSuffix: String
  answerEqualFold: String
  answerContainsFold: String
  """category edge predicates"""
  hasCategory: Boolean
  hasCategoryWith: [CategoryWhereInput!]
  """game edge predicates"""
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Game implements Node {
  id: ID!
  show: Int!
  airdate: Time! @goField(name: "AirDate", forceResolver: false)
  tapedate: Time! @goField(name: "TapeDate", forceResolver: false)
  season: Season!
}
"""A connection to a list of items."""
type GameConnection {
  """A list of edges."""
  edges: [GameEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Game connections"""
input GameOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Games."""
  field: GameOrderField!
}
"""Properties by which Game connections can be ordered."""
enum GameOrderField {
  ID
  SHOW
  AIR_DATE
  TAPE_DATE
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """show field predicates"""
  show: Int
  showNEQ: Int
  showIn: [Int!]
  showNotIn: [Int!]
  showGT: Int
  showGTE: Int
  showLT: Int
  showLTE: Int
  """airDate field predicates"""
  airdate: Time
  airdateNEQ: Time
  airdateIn: [Time!]
  airdateNotIn: [Time!]
  airdateGT: Time
  airdateGTE: Time
  airdateLT: Time
  airdateLTE: Time
  """tapeDate field predicates"""
  tapedate: Time
  tapedateNEQ: Time
  tapedateIn: [Time!]
  tapedateNotIn: [Time!]
  tapedateGT: Time
  tapedateGTE: Time
  tapedateLT: Time
  tapedateLTE: Time
  """season edge predicates"""
  hasSeason: Boolean
  hasSeasonWith: [SeasonWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/jepp/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
}
type Season implements Node {
  id: ID!
  number: Int!
  startdate: Time! @goField(name: "StartDate", forceResolver: false)
  enddate: Time! @goField(name: "EndDate", forceResolver: false)
}
"""A connection to a list of items."""
type SeasonConnection {
  """A list of edges."""
  edges: [SeasonEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SeasonEdge {
  """The item at the end of the edge."""
  node: Season
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Season connections"""
input SeasonOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Seasons."""
  field: SeasonOrderField!
}
"""Properties by which Season connections can be ordered."""
enum SeasonOrderField {
  ID
  NUMBER
  START_DATE
  END_DATE
}
"""
SeasonWhereInput is used for filtering Season objects.
Input was generated by ent.
"""
input SeasonWhereInput {
  not: SeasonWhereInput
  and: [SeasonWhereInput!]
  or: [SeasonWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """number field predicates"""
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int
  """startDate field predicates"""
  startdate: Time
  startdateNEQ: Time
  startdateIn: [Time!]
  startdateNotIn: [Time!]
  startdateGT: Time
  startdateGTE: Time
  startdateLT: Time
  startdateLTE: Time
  """endDate field predicates"""
  enddate: Time
  enddateNEQ: Time
  enddateIn: [Time!]
  enddateNotIn: [Time!]
  enddateGT: Time
  enddateGTE: Time
  enddateLT: Time
  enddateLTE: Time
}
"""The builtin Time type"""
scalar Time
