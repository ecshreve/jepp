// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Season     Season                "json:\"season\" graphql:\"season\""
	Seasons    []*Season             "json:\"seasons\" graphql:\"seasons\""
	Clue       Clue                  "json:\"clue\" graphql:\"clue\""
	Clues      *CluesConnection      "json:\"clues\" graphql:\"clues\""
	Category   Category              "json:\"category\" graphql:\"category\""
	Categories *CategoriesConnection "json:\"categories\" graphql:\"categories\""
	Game       Game                  "json:\"game\" graphql:\"game\""
	Games      *GamesConnection      "json:\"games\" graphql:\"games\""
}
type GetSeason struct {
	Season struct {
		ID        string "json:\"id\" graphql:\"id\""
		Number    int    "json:\"number\" graphql:\"number\""
		StartDate string "json:\"startDate\" graphql:\"startDate\""
		EndDate   string "json:\"endDate\" graphql:\"endDate\""
	} "json:\"season\" graphql:\"season\""
}
type GetSeasons struct {
	Seasons []*struct {
		ID        string "json:\"id\" graphql:\"id\""
		Number    int    "json:\"number\" graphql:\"number\""
		StartDate string "json:\"startDate\" graphql:\"startDate\""
		EndDate   string "json:\"endDate\" graphql:\"endDate\""
	} "json:\"seasons\" graphql:\"seasons\""
}

const GetSeasonDocument = `query GetSeason ($id: ID!) {
	season(seasonID: $id) {
		id
		number
		startDate
		endDate
	}
}
`

func (c *Client) GetSeason(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*GetSeason, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetSeason
	if err := c.Client.Post(ctx, "GetSeason", GetSeasonDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetSeasonsDocument = `query GetSeasons {
	seasons {
		id
		number
		startDate
		endDate
	}
}
`

func (c *Client) GetSeasons(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*GetSeasons, error) {
	vars := map[string]interface{}{}

	var res GetSeasons
	if err := c.Client.Post(ctx, "GetSeasons", GetSeasonsDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
