package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/ecshreve/jepp/app/models"
	"github.com/ecshreve/jepp/graph"
	"github.com/ecshreve/jepp/graph/common"
)

// Season is the resolver for the season field.
func (r *gameResolver) Season(ctx context.Context, obj *models.Game) (*models.Season, error) {
	context := common.GetContext(ctx)

	var season models.Season
	if err := context.Database.First(&season, obj.SeasonID).Error; err != nil {
		return nil, err
	}

	return &season, nil
}

// AirDate is the resolver for the airDate field.
func (r *gameResolver) AirDate(ctx context.Context, obj *models.Game) (string, error) {
	context := common.GetContext(ctx)

	var game models.Game
	if err := context.Database.First(&game, obj.ID).Error; err != nil {
		return "", err
	}

	return game.AirDate.Format("2006-01-02"), nil
}

// TapeDate is the resolver for the tapeDate field.
func (r *gameResolver) TapeDate(ctx context.Context, obj *models.Game) (string, error) {
	context := common.GetContext(ctx)

	var game models.Game
	if err := context.Database.First(&game, obj.ID).Error; err != nil {
		return "", err
	}

	return game.TapeDate.Format("2006-01-02"), nil
}

// Clues is the resolver for the clues field.
func (r *gameResolver) Clues(ctx context.Context, obj *models.Game) ([]*models.Clue, error) {
	context := common.GetContext(ctx)

	var clues []*models.Clue
	if err := context.Database.Where("game_id = ?", obj.ID).Find(&clues).Error; err != nil {
		return nil, err
	}

	return clues, nil
}

// Game returns graph.GameResolver implementation.
func (r *Resolver) Game() graph.GameResolver { return &gameResolver{r} }

type gameResolver struct{ *Resolver }
