package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/ecshreve/jepp/graph/common"
	"github.com/ecshreve/jepp/graph/model"
)

// CreateClue is the resolver for the createClue field.
func (r *mutationResolver) CreateClue(ctx context.Context, input *model.ClueInput) (*model.Clue, error) {
	context := common.GetContext(ctx)
	clue := &model.Clue{
		Question: input.Question,
		Answer:   input.Answer,
	}

	err := context.Database.Create(clue).Error
	if err != nil {
		return nil, err
	}
	return clue, nil
}

// UpdateClue is the resolver for the updateClue field.
func (r *mutationResolver) UpdateClue(ctx context.Context, clueID int64, input model.ClueInput) (*model.Clue, error) {
	context := common.GetContext(ctx)
	clue := &model.Clue{
		ID:       clueID,
		Question: input.Question,
		Answer:   input.Answer,
	}

	err := context.Database.Save(clue).Error
	if err != nil {
		return nil, err
	}
	return clue, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, clueID int64) (*model.Clue, error) {
	context := common.GetContext(ctx)
	var clue *model.Clue
	err := context.Database.Where("id = ?", clueID).Delete(&clue).Error
	if err != nil {
		return nil, err
	}
	return clue, nil
}

// Clues is the resolver for the clues field.
func (r *queryResolver) Clues(ctx context.Context) ([]*model.Clue, error) {
	context := common.GetContext(ctx)
	var clues []*model.Clue
	err := context.Database.Find(&clues).Error
	if err != nil {
		return nil, err
	}
	return clues, nil
}

// Clue is the resolver for the clue field.
func (r *queryResolver) Clue(ctx context.Context, clueID int64) (*model.Clue, error) {
	context := common.GetContext(ctx)
	var clue *model.Clue
	err := context.Database.Where("id = ?", clueID).First(&clue).Error
	if err != nil {
		return nil, err
	}
	return clue, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
