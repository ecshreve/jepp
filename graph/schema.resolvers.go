package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/ecshreve/jepp/app/models"
	"github.com/ecshreve/jepp/graph/common"
	"github.com/ecshreve/jepp/graph/model"
)

// Clues is the resolver for the clues field.
func (r *categoryResolver) Clues(ctx context.Context, obj *models.Category) ([]*models.Clue, error) {
	context := common.GetContext(ctx)

	var clues []*models.Clue
	if err := context.Database.Find(&clues, &models.Clue{CategoryID: obj.ID}).Error; err != nil {
		return nil, err
	}

	return clues, nil
}

// Category is the resolver for the category field.
func (r *clueResolver) Category(ctx context.Context, obj *models.Clue) (*models.Category, error) {
	context := common.GetContext(ctx)

	var category models.Category
	if err := context.Database.First(&category, obj.CategoryID).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

// Clue is the resolver for the clue field.
func (r *queryResolver) Clue(ctx context.Context, clueID int) (*models.Clue, error) {
	context := common.GetContext(ctx)

	var clue models.Clue
	if err := context.Database.First(&clue, clueID).Error; err != nil {
		return nil, err
	}

	return &clue, nil
}

// Clues is the resolver for the clues field.
func (r *queryResolver) Clues(ctx context.Context) ([]*models.Clue, error) {
	context := common.GetContext(ctx)

	var clues []*models.Clue
	if err := context.Database.Find(&clues).Error; err != nil {
		return nil, err
	}

	return clues, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, categoryID int) (*models.Category, error) {
	context := common.GetContext(ctx)

	var category models.Category
	if err := context.Database.First(&category, categoryID).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*models.Category, error) {
	context := common.GetContext(ctx)

	var categories []*models.Category
	if err := context.Database.Find(&categories).Error; err != nil {
		return nil, err
	}

	return categories, nil
}

// Season is the resolver for the season field.
func (r *queryResolver) Season(ctx context.Context, seasonID int) (*model.Season, error) {
	context := common.GetContext(ctx)

	var season model.Season
	if err := context.Database.First(&season, seasonID).Error; err != nil {
		return nil, err
	}

	return &season, nil
}

// Seasons is the resolver for the seasons field.
func (r *queryResolver) Seasons(ctx context.Context) ([]*model.Season, error) {
	context := common.GetContext(ctx)

	var seasons []*model.Season
	if err := context.Database.Find(&seasons).Error; err != nil {
		return nil, err
	}

	return seasons, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Clue returns ClueResolver implementation.
func (r *Resolver) Clue() ClueResolver { return &clueResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type clueResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
