package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"encoding/base64"
	"fmt"
	"math"

	"github.com/ecshreve/jepp/app/models"
	"github.com/ecshreve/jepp/graph/common"
	"github.com/ecshreve/jepp/graph/model"
)

// Season is the resolver for the season field.
func (r *gameResolver) Season(ctx context.Context, obj *models.Game) (*model.Season, error) {
	context := common.GetContext(ctx)

	var season model.Season
	if err := context.Database.First(&season, obj.SeasonID).Error; err != nil {
		return nil, err
	}

	return &season, nil
}

// AirDate is the resolver for the airDate field.
func (r *gameResolver) AirDate(ctx context.Context, obj *models.Game) (string, error) {
	context := common.GetContext(ctx)

	var game models.Game
	if err := context.Database.First(&game, obj.ID).Error; err != nil {
		return "", err
	}

	return game.AirDate.Format("2006-01-02"), nil
}

// TapeDate is the resolver for the tapeDate field.
func (r *gameResolver) TapeDate(ctx context.Context, obj *models.Game) (string, error) {
	context := common.GetContext(ctx)

	var game models.Game
	if err := context.Database.First(&game, obj.ID).Error; err != nil {
		return "", err
	}

	return game.TapeDate.Format("2006-01-02"), nil
}

// CluesConnection is the resolver for the cluesConnection field.
func (r *gameResolver) CluesConnection(ctx context.Context, obj *models.Game, first *int64, after *string) (*model.CluesConnection, error) {
	context := common.GetContext(ctx)

	// The cursor is base64 encoded by convention, so we need to decode it first
	var decodedCursor string
	if after != nil {
		b, err := base64.StdEncoding.DecodeString(*after)
		if err != nil {
			return nil, err
		}
		decodedCursor = string(b)
	}

	if decodedCursor == "" {
		decodedCursor = "0"
	}

	// Here we could query the DB to get data, e.g.
	var edges []*model.CluesEdge
	hasNextPage := false

	var clues []*models.Clue
	if err := context.Database.Limit(1000).Order("id asc").Where("game_id = ? AND id > ?", obj.ID, decodedCursor).Find(&clues).Error; err != nil {
		return nil, err
	}

	bound := int(math.Min(float64(int(*first)), float64(len(clues))))
	for i := 0; i < bound; i++ {

		edges = append(edges, &model.CluesEdge{
			Cursor: base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%d", clues[i].ID))),
			Node:   clues[i],
		})
	}

	if len(edges) == int(*first) && len(edges) < len(clues) {
		hasNextPage = true
	}

	pageInfo := model.PageInfo{
		StartCursor: base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%d", edges[0].Node.ID))),
		EndCursor:   base64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%d", edges[len(edges)-1].Node.ID))),
		HasNextPage: &hasNextPage,
	}

	cc := model.CluesConnection{
		Edges:    edges,
		PageInfo: &pageInfo,
	}

	return &cc, nil
}

// Game returns GameResolver implementation.
func (r *Resolver) Game() GameResolver { return &gameResolver{r} }

type gameResolver struct{ *Resolver }
