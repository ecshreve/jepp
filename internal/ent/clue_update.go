// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ecshreve/jepp/internal/ent/category"
	"github.com/ecshreve/jepp/internal/ent/clue"
	"github.com/ecshreve/jepp/internal/ent/game"
	"github.com/ecshreve/jepp/internal/ent/predicate"
)

// ClueUpdate is the builder for updating Clue entities.
type ClueUpdate struct {
	config
	hooks    []Hook
	mutation *ClueMutation
}

// Where appends a list predicates to the ClueUpdate builder.
func (cu *ClueUpdate) Where(ps ...predicate.Clue) *ClueUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetQuestion sets the "question" field.
func (cu *ClueUpdate) SetQuestion(s string) *ClueUpdate {
	cu.mutation.SetQuestion(s)
	return cu
}

// SetAnswer sets the "answer" field.
func (cu *ClueUpdate) SetAnswer(s string) *ClueUpdate {
	cu.mutation.SetAnswer(s)
	return cu
}

// SetCategoryID sets the "category_id" field.
func (cu *ClueUpdate) SetCategoryID(i int) *ClueUpdate {
	cu.mutation.SetCategoryID(i)
	return cu
}

// SetGameID sets the "game_id" field.
func (cu *ClueUpdate) SetGameID(i int) *ClueUpdate {
	cu.mutation.SetGameID(i)
	return cu
}

// SetCategory sets the "category" edge to the Category entity.
func (cu *ClueUpdate) SetCategory(c *Category) *ClueUpdate {
	return cu.SetCategoryID(c.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (cu *ClueUpdate) SetGame(g *Game) *ClueUpdate {
	return cu.SetGameID(g.ID)
}

// Mutation returns the ClueMutation object of the builder.
func (cu *ClueUpdate) Mutation() *ClueMutation {
	return cu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (cu *ClueUpdate) ClearCategory() *ClueUpdate {
	cu.mutation.ClearCategory()
	return cu
}

// ClearGame clears the "game" edge to the Game entity.
func (cu *ClueUpdate) ClearGame() *ClueUpdate {
	cu.mutation.ClearGame()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClueUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClueUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClueUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClueUpdate) check() error {
	if _, ok := cu.mutation.CategoryID(); cu.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clue.category"`)
	}
	if _, ok := cu.mutation.GameID(); cu.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clue.game"`)
	}
	return nil
}

func (cu *ClueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clue.Table, clue.Columns, sqlgraph.NewFieldSpec(clue.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Question(); ok {
		_spec.SetField(clue.FieldQuestion, field.TypeString, value)
	}
	if value, ok := cu.mutation.Answer(); ok {
		_spec.SetField(clue.FieldAnswer, field.TypeString, value)
	}
	if cu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.CategoryTable,
			Columns: []string{clue.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.CategoryTable,
			Columns: []string{clue.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.GameTable,
			Columns: []string{clue.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.GameTable,
			Columns: []string{clue.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClueUpdateOne is the builder for updating a single Clue entity.
type ClueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClueMutation
}

// SetQuestion sets the "question" field.
func (cuo *ClueUpdateOne) SetQuestion(s string) *ClueUpdateOne {
	cuo.mutation.SetQuestion(s)
	return cuo
}

// SetAnswer sets the "answer" field.
func (cuo *ClueUpdateOne) SetAnswer(s string) *ClueUpdateOne {
	cuo.mutation.SetAnswer(s)
	return cuo
}

// SetCategoryID sets the "category_id" field.
func (cuo *ClueUpdateOne) SetCategoryID(i int) *ClueUpdateOne {
	cuo.mutation.SetCategoryID(i)
	return cuo
}

// SetGameID sets the "game_id" field.
func (cuo *ClueUpdateOne) SetGameID(i int) *ClueUpdateOne {
	cuo.mutation.SetGameID(i)
	return cuo
}

// SetCategory sets the "category" edge to the Category entity.
func (cuo *ClueUpdateOne) SetCategory(c *Category) *ClueUpdateOne {
	return cuo.SetCategoryID(c.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (cuo *ClueUpdateOne) SetGame(g *Game) *ClueUpdateOne {
	return cuo.SetGameID(g.ID)
}

// Mutation returns the ClueMutation object of the builder.
func (cuo *ClueUpdateOne) Mutation() *ClueMutation {
	return cuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (cuo *ClueUpdateOne) ClearCategory() *ClueUpdateOne {
	cuo.mutation.ClearCategory()
	return cuo
}

// ClearGame clears the "game" edge to the Game entity.
func (cuo *ClueUpdateOne) ClearGame() *ClueUpdateOne {
	cuo.mutation.ClearGame()
	return cuo
}

// Where appends a list predicates to the ClueUpdate builder.
func (cuo *ClueUpdateOne) Where(ps ...predicate.Clue) *ClueUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClueUpdateOne) Select(field string, fields ...string) *ClueUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clue entity.
func (cuo *ClueUpdateOne) Save(ctx context.Context) (*Clue, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClueUpdateOne) SaveX(ctx context.Context) *Clue {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClueUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClueUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClueUpdateOne) check() error {
	if _, ok := cuo.mutation.CategoryID(); cuo.mutation.CategoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clue.category"`)
	}
	if _, ok := cuo.mutation.GameID(); cuo.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Clue.game"`)
	}
	return nil
}

func (cuo *ClueUpdateOne) sqlSave(ctx context.Context) (_node *Clue, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clue.Table, clue.Columns, sqlgraph.NewFieldSpec(clue.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clue.FieldID)
		for _, f := range fields {
			if !clue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Question(); ok {
		_spec.SetField(clue.FieldQuestion, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Answer(); ok {
		_spec.SetField(clue.FieldAnswer, field.TypeString, value)
	}
	if cuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.CategoryTable,
			Columns: []string{clue.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.CategoryTable,
			Columns: []string{clue.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.GameTable,
			Columns: []string{clue.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clue.GameTable,
			Columns: []string{clue.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clue{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
