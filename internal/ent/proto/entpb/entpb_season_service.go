// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/ecshreve/jepp/internal/ent"
	game "github.com/ecshreve/jepp/internal/ent/game"
	season "github.com/ecshreve/jepp/internal/ent/season"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// SeasonService implements SeasonServiceServer
type SeasonService struct {
	client *ent.Client
	UnimplementedSeasonServiceServer
}

// NewSeasonService returns a new SeasonService
func NewSeasonService(client *ent.Client) *SeasonService {
	return &SeasonService{
		client: client,
	}
}

// toProtoSeason transforms the ent type to the pb type
func toProtoSeason(e *ent.Season) (*Season, error) {
	v := &Season{}
	endDate := timestamppb.New(e.EndDate)
	v.EndDate = endDate
	id := int64(e.ID)
	v.Id = id
	number := int64(e.Number)
	v.Number = number
	startDate := timestamppb.New(e.StartDate)
	v.StartDate = startDate
	for _, edg := range e.Edges.Games {
		id := int64(edg.ID)
		v.Games = append(v.Games, &Game{
			Id: id,
		})
	}
	return v, nil
}

// toProtoSeasonList transforms a list of ent type to a list of pb type
func toProtoSeasonList(e []*ent.Season) ([]*Season, error) {
	var pbList []*Season
	for _, entEntity := range e {
		pbEntity, err := toProtoSeason(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements SeasonServiceServer.Create
func (svc *SeasonService) Create(ctx context.Context, req *CreateSeasonRequest) (*Season, error) {
	season := req.GetSeason()
	m, err := svc.createBuilder(season)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSeason(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements SeasonServiceServer.Get
func (svc *SeasonService) Get(ctx context.Context, req *GetSeasonRequest) (*Season, error) {
	var (
		err error
		get *ent.Season
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetSeasonRequest_VIEW_UNSPECIFIED, GetSeasonRequest_BASIC:
		get, err = svc.client.Season.Get(ctx, id)
	case GetSeasonRequest_WITH_EDGE_IDS:
		get, err = svc.client.Season.Query().
			Where(season.ID(id)).
			WithGames(func(query *ent.GameQuery) {
				query.Select(game.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoSeason(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements SeasonServiceServer.Update
func (svc *SeasonService) Update(ctx context.Context, req *UpdateSeasonRequest) (*Season, error) {
	season := req.GetSeason()
	seasonID := int(season.GetId())
	m := svc.client.Season.UpdateOneID(seasonID)
	seasonEndDate := runtime.ExtractTime(season.GetEndDate())
	m.SetEndDate(seasonEndDate)
	seasonNumber := int(season.GetNumber())
	m.SetNumber(seasonNumber)
	seasonStartDate := runtime.ExtractTime(season.GetStartDate())
	m.SetStartDate(seasonStartDate)
	for _, item := range season.GetGames() {
		games := int(item.GetId())
		m.AddGameIDs(games)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSeason(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements SeasonServiceServer.Delete
func (svc *SeasonService) Delete(ctx context.Context, req *DeleteSeasonRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Season.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements SeasonServiceServer.List
func (svc *SeasonService) List(ctx context.Context, req *ListSeasonRequest) (*ListSeasonResponse, error) {
	var (
		err      error
		entList  []*ent.Season
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Season.Query().
		Order(ent.Desc(season.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(season.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListSeasonRequest_VIEW_UNSPECIFIED, ListSeasonRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListSeasonRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithGames(func(query *ent.GameQuery) {
				query.Select(game.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoSeasonList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListSeasonResponse{
			SeasonList:    protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements SeasonServiceServer.BatchCreate
func (svc *SeasonService) BatchCreate(ctx context.Context, req *BatchCreateSeasonsRequest) (*BatchCreateSeasonsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.SeasonCreate, len(requests))
	for i, req := range requests {
		season := req.GetSeason()
		var err error
		bulk[i], err = svc.createBuilder(season)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Season.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoSeasonList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateSeasonsResponse{
			Seasons: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *SeasonService) createBuilder(season *Season) (*ent.SeasonCreate, error) {
	m := svc.client.Season.Create()
	seasonEndDate := runtime.ExtractTime(season.GetEndDate())
	m.SetEndDate(seasonEndDate)
	seasonNumber := int(season.GetNumber())
	m.SetNumber(seasonNumber)
	seasonStartDate := runtime.ExtractTime(season.GetStartDate())
	m.SetStartDate(seasonStartDate)
	for _, item := range season.GetGames() {
		games := int(item.GetId())
		m.AddGameIDs(games)
	}
	return m, nil
}
