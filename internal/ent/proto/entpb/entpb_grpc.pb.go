// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	Get(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	Delete(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateCategoriesRequest, opts ...grpc.CallOption) (*BatchCreateCategoriesResponse, error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) Create(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Get(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Update(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) Delete(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) List(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) BatchCreate(ctx context.Context, in *BatchCreateCategoriesRequest, opts ...grpc.CallOption) (*BatchCreateCategoriesResponse, error) {
	out := new(BatchCreateCategoriesResponse)
	err := c.cc.Invoke(ctx, "/entpb.CategoryService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility
type CategoryServiceServer interface {
	Create(context.Context, *CreateCategoryRequest) (*Category, error)
	Get(context.Context, *GetCategoryRequest) (*Category, error)
	Update(context.Context, *UpdateCategoryRequest) (*Category, error)
	Delete(context.Context, *DeleteCategoryRequest) (*empty.Empty, error)
	List(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error)
	BatchCreate(context.Context, *BatchCreateCategoriesRequest) (*BatchCreateCategoriesResponse, error)
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServiceServer struct {
}

func (UnimplementedCategoryServiceServer) Create(context.Context, *CreateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoryServiceServer) Get(context.Context, *GetCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCategoryServiceServer) Update(context.Context, *UpdateCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryServiceServer) Delete(context.Context, *DeleteCategoryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoryServiceServer) List(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCategoryServiceServer) BatchCreate(context.Context, *BatchCreateCategoriesRequest) (*BatchCreateCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Create(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Get(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Update(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).Delete(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).List(ctx, req.(*ListCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.CategoryService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServiceServer).BatchCreate(ctx, req.(*BatchCreateCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CategoryService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CategoryService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CategoryService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CategoryService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _CategoryService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// ClueServiceClient is the client API for ClueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClueServiceClient interface {
	Create(ctx context.Context, in *CreateClueRequest, opts ...grpc.CallOption) (*Clue, error)
	Get(ctx context.Context, in *GetClueRequest, opts ...grpc.CallOption) (*Clue, error)
	Update(ctx context.Context, in *UpdateClueRequest, opts ...grpc.CallOption) (*Clue, error)
	Delete(ctx context.Context, in *DeleteClueRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListClueRequest, opts ...grpc.CallOption) (*ListClueResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateCluesRequest, opts ...grpc.CallOption) (*BatchCreateCluesResponse, error)
}

type clueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClueServiceClient(cc grpc.ClientConnInterface) ClueServiceClient {
	return &clueServiceClient{cc}
}

func (c *clueServiceClient) Create(ctx context.Context, in *CreateClueRequest, opts ...grpc.CallOption) (*Clue, error) {
	out := new(Clue)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clueServiceClient) Get(ctx context.Context, in *GetClueRequest, opts ...grpc.CallOption) (*Clue, error) {
	out := new(Clue)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clueServiceClient) Update(ctx context.Context, in *UpdateClueRequest, opts ...grpc.CallOption) (*Clue, error) {
	out := new(Clue)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clueServiceClient) Delete(ctx context.Context, in *DeleteClueRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clueServiceClient) List(ctx context.Context, in *ListClueRequest, opts ...grpc.CallOption) (*ListClueResponse, error) {
	out := new(ListClueResponse)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clueServiceClient) BatchCreate(ctx context.Context, in *BatchCreateCluesRequest, opts ...grpc.CallOption) (*BatchCreateCluesResponse, error) {
	out := new(BatchCreateCluesResponse)
	err := c.cc.Invoke(ctx, "/entpb.ClueService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClueServiceServer is the server API for ClueService service.
// All implementations must embed UnimplementedClueServiceServer
// for forward compatibility
type ClueServiceServer interface {
	Create(context.Context, *CreateClueRequest) (*Clue, error)
	Get(context.Context, *GetClueRequest) (*Clue, error)
	Update(context.Context, *UpdateClueRequest) (*Clue, error)
	Delete(context.Context, *DeleteClueRequest) (*empty.Empty, error)
	List(context.Context, *ListClueRequest) (*ListClueResponse, error)
	BatchCreate(context.Context, *BatchCreateCluesRequest) (*BatchCreateCluesResponse, error)
	mustEmbedUnimplementedClueServiceServer()
}

// UnimplementedClueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClueServiceServer struct {
}

func (UnimplementedClueServiceServer) Create(context.Context, *CreateClueRequest) (*Clue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClueServiceServer) Get(context.Context, *GetClueRequest) (*Clue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClueServiceServer) Update(context.Context, *UpdateClueRequest) (*Clue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClueServiceServer) Delete(context.Context, *DeleteClueRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClueServiceServer) List(context.Context, *ListClueRequest) (*ListClueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClueServiceServer) BatchCreate(context.Context, *BatchCreateCluesRequest) (*BatchCreateCluesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedClueServiceServer) mustEmbedUnimplementedClueServiceServer() {}

// UnsafeClueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClueServiceServer will
// result in compilation errors.
type UnsafeClueServiceServer interface {
	mustEmbedUnimplementedClueServiceServer()
}

func RegisterClueServiceServer(s grpc.ServiceRegistrar, srv ClueServiceServer) {
	s.RegisterService(&ClueService_ServiceDesc, srv)
}

func _ClueService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).Create(ctx, req.(*CreateClueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClueService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).Get(ctx, req.(*GetClueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClueService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).Update(ctx, req.(*UpdateClueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClueService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).Delete(ctx, req.(*DeleteClueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClueService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).List(ctx, req.(*ListClueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClueService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateCluesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClueServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.ClueService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClueServiceServer).BatchCreate(ctx, req.(*BatchCreateCluesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClueService_ServiceDesc is the grpc.ServiceDesc for ClueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.ClueService",
	HandlerType: (*ClueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClueService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClueService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClueService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClueService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClueService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _ClueService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Game, error)
	Get(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error)
	Update(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*Game, error)
	Delete(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListGameRequest, opts ...grpc.CallOption) (*ListGameResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateGamesRequest, opts ...grpc.CallOption) (*BatchCreateGamesResponse, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) Create(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/entpb.GameService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Get(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/entpb.GameService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Update(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/entpb.GameService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Delete(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.GameService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) List(ctx context.Context, in *ListGameRequest, opts ...grpc.CallOption) (*ListGameResponse, error) {
	out := new(ListGameResponse)
	err := c.cc.Invoke(ctx, "/entpb.GameService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) BatchCreate(ctx context.Context, in *BatchCreateGamesRequest, opts ...grpc.CallOption) (*BatchCreateGamesResponse, error) {
	out := new(BatchCreateGamesResponse)
	err := c.cc.Invoke(ctx, "/entpb.GameService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	Create(context.Context, *CreateGameRequest) (*Game, error)
	Get(context.Context, *GetGameRequest) (*Game, error)
	Update(context.Context, *UpdateGameRequest) (*Game, error)
	Delete(context.Context, *DeleteGameRequest) (*empty.Empty, error)
	List(context.Context, *ListGameRequest) (*ListGameResponse, error)
	BatchCreate(context.Context, *BatchCreateGamesRequest) (*BatchCreateGamesResponse, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) Create(context.Context, *CreateGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGameServiceServer) Get(context.Context, *GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGameServiceServer) Update(context.Context, *UpdateGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGameServiceServer) Delete(context.Context, *DeleteGameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGameServiceServer) List(context.Context, *ListGameRequest) (*ListGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGameServiceServer) BatchCreate(context.Context, *BatchCreateGamesRequest) (*BatchCreateGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Create(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Get(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Update(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Delete(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).List(ctx, req.(*ListGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GameService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).BatchCreate(ctx, req.(*BatchCreateGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GameService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GameService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GameService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GameService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GameService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _GameService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// SeasonServiceClient is the client API for SeasonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonServiceClient interface {
	Create(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*Season, error)
	Get(ctx context.Context, in *GetSeasonRequest, opts ...grpc.CallOption) (*Season, error)
	Update(ctx context.Context, in *UpdateSeasonRequest, opts ...grpc.CallOption) (*Season, error)
	Delete(ctx context.Context, in *DeleteSeasonRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListSeasonRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateSeasonsRequest, opts ...grpc.CallOption) (*BatchCreateSeasonsResponse, error)
}

type seasonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonServiceClient(cc grpc.ClientConnInterface) SeasonServiceClient {
	return &seasonServiceClient{cc}
}

func (c *seasonServiceClient) Create(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) Get(ctx context.Context, in *GetSeasonRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) Update(ctx context.Context, in *UpdateSeasonRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) Delete(ctx context.Context, in *DeleteSeasonRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) List(ctx context.Context, in *ListSeasonRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error) {
	out := new(ListSeasonResponse)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonServiceClient) BatchCreate(ctx context.Context, in *BatchCreateSeasonsRequest, opts ...grpc.CallOption) (*BatchCreateSeasonsResponse, error) {
	out := new(BatchCreateSeasonsResponse)
	err := c.cc.Invoke(ctx, "/entpb.SeasonService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonServiceServer is the server API for SeasonService service.
// All implementations must embed UnimplementedSeasonServiceServer
// for forward compatibility
type SeasonServiceServer interface {
	Create(context.Context, *CreateSeasonRequest) (*Season, error)
	Get(context.Context, *GetSeasonRequest) (*Season, error)
	Update(context.Context, *UpdateSeasonRequest) (*Season, error)
	Delete(context.Context, *DeleteSeasonRequest) (*empty.Empty, error)
	List(context.Context, *ListSeasonRequest) (*ListSeasonResponse, error)
	BatchCreate(context.Context, *BatchCreateSeasonsRequest) (*BatchCreateSeasonsResponse, error)
	mustEmbedUnimplementedSeasonServiceServer()
}

// UnimplementedSeasonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeasonServiceServer struct {
}

func (UnimplementedSeasonServiceServer) Create(context.Context, *CreateSeasonRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSeasonServiceServer) Get(context.Context, *GetSeasonRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSeasonServiceServer) Update(context.Context, *UpdateSeasonRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSeasonServiceServer) Delete(context.Context, *DeleteSeasonRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSeasonServiceServer) List(context.Context, *ListSeasonRequest) (*ListSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSeasonServiceServer) BatchCreate(context.Context, *BatchCreateSeasonsRequest) (*BatchCreateSeasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedSeasonServiceServer) mustEmbedUnimplementedSeasonServiceServer() {}

// UnsafeSeasonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonServiceServer will
// result in compilation errors.
type UnsafeSeasonServiceServer interface {
	mustEmbedUnimplementedSeasonServiceServer()
}

func RegisterSeasonServiceServer(s grpc.ServiceRegistrar, srv SeasonServiceServer) {
	s.RegisterService(&SeasonService_ServiceDesc, srv)
}

func _SeasonService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).Create(ctx, req.(*CreateSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).Get(ctx, req.(*GetSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).Update(ctx, req.(*UpdateSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).Delete(ctx, req.(*DeleteSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).List(ctx, req.(*ListSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateSeasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.SeasonService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonServiceServer).BatchCreate(ctx, req.(*BatchCreateSeasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonService_ServiceDesc is the grpc.ServiceDesc for SeasonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.SeasonService",
	HandlerType: (*SeasonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SeasonService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SeasonService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SeasonService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SeasonService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SeasonService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _SeasonService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
