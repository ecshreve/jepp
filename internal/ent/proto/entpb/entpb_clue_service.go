// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/ecshreve/jepp/internal/ent"
	category "github.com/ecshreve/jepp/internal/ent/category"
	clue "github.com/ecshreve/jepp/internal/ent/clue"
	game "github.com/ecshreve/jepp/internal/ent/game"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strconv "strconv"
)

// ClueService implements ClueServiceServer
type ClueService struct {
	client *ent.Client
	UnimplementedClueServiceServer
}

// NewClueService returns a new ClueService
func NewClueService(client *ent.Client) *ClueService {
	return &ClueService{
		client: client,
	}
}

// toProtoClue transforms the ent type to the pb type
func toProtoClue(e *ent.Clue) (*Clue, error) {
	v := &Clue{}
	answer := e.Answer
	v.Answer = answer
	category := int64(e.CategoryID)
	v.CategoryId = category
	game := int64(e.GameID)
	v.GameId = game
	id := int64(e.ID)
	v.Id = id
	question := e.Question
	v.Question = question
	if edg := e.Edges.Category; edg != nil {
		id := int64(edg.ID)
		v.Category = &Category{
			Id: id,
		}
	}
	if edg := e.Edges.Game; edg != nil {
		id := int64(edg.ID)
		v.Game = &Game{
			Id: id,
		}
	}
	return v, nil
}

// toProtoClueList transforms a list of ent type to a list of pb type
func toProtoClueList(e []*ent.Clue) ([]*Clue, error) {
	var pbList []*Clue
	for _, entEntity := range e {
		pbEntity, err := toProtoClue(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ClueServiceServer.Create
func (svc *ClueService) Create(ctx context.Context, req *CreateClueRequest) (*Clue, error) {
	clue := req.GetClue()
	m, err := svc.createBuilder(clue)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoClue(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ClueServiceServer.Get
func (svc *ClueService) Get(ctx context.Context, req *GetClueRequest) (*Clue, error) {
	var (
		err error
		get *ent.Clue
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetClueRequest_VIEW_UNSPECIFIED, GetClueRequest_BASIC:
		get, err = svc.client.Clue.Get(ctx, id)
	case GetClueRequest_WITH_EDGE_IDS:
		get, err = svc.client.Clue.Query().
			Where(clue.ID(id)).
			WithCategory(func(query *ent.CategoryQuery) {
				query.Select(category.FieldID)
			}).
			WithGame(func(query *ent.GameQuery) {
				query.Select(game.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoClue(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ClueServiceServer.Update
func (svc *ClueService) Update(ctx context.Context, req *UpdateClueRequest) (*Clue, error) {
	clue := req.GetClue()
	clueID := int(clue.GetId())
	m := svc.client.Clue.UpdateOneID(clueID)
	clueAnswer := clue.GetAnswer()
	m.SetAnswer(clueAnswer)
	clueCategoryID := int(clue.GetCategoryId())
	m.SetCategoryID(clueCategoryID)
	clueGameID := int(clue.GetGameId())
	m.SetGameID(clueGameID)
	clueQuestion := clue.GetQuestion()
	m.SetQuestion(clueQuestion)
	if clue.GetCategory() != nil {
		clueCategory := int(clue.GetCategory().GetId())
		m.SetCategoryID(clueCategory)
	}
	if clue.GetGame() != nil {
		clueGame := int(clue.GetGame().GetId())
		m.SetGameID(clueGame)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoClue(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ClueServiceServer.Delete
func (svc *ClueService) Delete(ctx context.Context, req *DeleteClueRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Clue.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ClueServiceServer.List
func (svc *ClueService) List(ctx context.Context, req *ListClueRequest) (*ListClueResponse, error) {
	var (
		err      error
		entList  []*ent.Clue
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Clue.Query().
		Order(ent.Desc(clue.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(clue.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListClueRequest_VIEW_UNSPECIFIED, ListClueRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListClueRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithCategory(func(query *ent.CategoryQuery) {
				query.Select(category.FieldID)
			}).
			WithGame(func(query *ent.GameQuery) {
				query.Select(game.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoClueList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListClueResponse{
			ClueList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ClueServiceServer.BatchCreate
func (svc *ClueService) BatchCreate(ctx context.Context, req *BatchCreateCluesRequest) (*BatchCreateCluesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ClueCreate, len(requests))
	for i, req := range requests {
		clue := req.GetClue()
		var err error
		bulk[i], err = svc.createBuilder(clue)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Clue.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoClueList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateCluesResponse{
			Clues: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ClueService) createBuilder(clue *Clue) (*ent.ClueCreate, error) {
	m := svc.client.Clue.Create()
	clueAnswer := clue.GetAnswer()
	m.SetAnswer(clueAnswer)
	clueCategoryID := int(clue.GetCategoryId())
	m.SetCategoryID(clueCategoryID)
	clueGameID := int(clue.GetGameId())
	m.SetGameID(clueGameID)
	clueQuestion := clue.GetQuestion()
	m.SetQuestion(clueQuestion)
	if clue.GetCategory() != nil {
		clueCategory := int(clue.GetCategory().GetId())
		m.SetCategoryID(clueCategory)
	}
	if clue.GetGame() != nil {
		clueGame := int(clue.GetGame().GetId())
		m.SetGameID(clueGame)
	}
	return m, nil
}
