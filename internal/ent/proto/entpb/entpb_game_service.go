// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/ecshreve/jepp/internal/ent"
	clue "github.com/ecshreve/jepp/internal/ent/clue"
	game "github.com/ecshreve/jepp/internal/ent/game"
	season "github.com/ecshreve/jepp/internal/ent/season"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// GameService implements GameServiceServer
type GameService struct {
	client *ent.Client
	UnimplementedGameServiceServer
}

// NewGameService returns a new GameService
func NewGameService(client *ent.Client) *GameService {
	return &GameService{
		client: client,
	}
}

// toProtoGame transforms the ent type to the pb type
func toProtoGame(e *ent.Game) (*Game, error) {
	v := &Game{}
	airDate := timestamppb.New(e.AirDate)
	v.AirDate = airDate
	id := int64(e.ID)
	v.Id = id
	season := int64(e.SeasonID)
	v.SeasonId = season
	show := int64(e.Show)
	v.Show = show
	tapeDate := timestamppb.New(e.TapeDate)
	v.TapeDate = tapeDate
	for _, edg := range e.Edges.Clues {
		id := int64(edg.ID)
		v.Clues = append(v.Clues, &Clue{
			Id: id,
		})
	}
	if edg := e.Edges.Season; edg != nil {
		id := int64(edg.ID)
		v.Season = &Season{
			Id: id,
		}
	}
	return v, nil
}

// toProtoGameList transforms a list of ent type to a list of pb type
func toProtoGameList(e []*ent.Game) ([]*Game, error) {
	var pbList []*Game
	for _, entEntity := range e {
		pbEntity, err := toProtoGame(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements GameServiceServer.Create
func (svc *GameService) Create(ctx context.Context, req *CreateGameRequest) (*Game, error) {
	game := req.GetGame()
	m, err := svc.createBuilder(game)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGame(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements GameServiceServer.Get
func (svc *GameService) Get(ctx context.Context, req *GetGameRequest) (*Game, error) {
	var (
		err error
		get *ent.Game
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetGameRequest_VIEW_UNSPECIFIED, GetGameRequest_BASIC:
		get, err = svc.client.Game.Get(ctx, id)
	case GetGameRequest_WITH_EDGE_IDS:
		get, err = svc.client.Game.Query().
			Where(game.ID(id)).
			WithClues(func(query *ent.ClueQuery) {
				query.Select(clue.FieldID)
			}).
			WithSeason(func(query *ent.SeasonQuery) {
				query.Select(season.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoGame(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements GameServiceServer.Update
func (svc *GameService) Update(ctx context.Context, req *UpdateGameRequest) (*Game, error) {
	game := req.GetGame()
	gameID := int(game.GetId())
	m := svc.client.Game.UpdateOneID(gameID)
	gameAirDate := runtime.ExtractTime(game.GetAirDate())
	m.SetAirDate(gameAirDate)
	gameSeasonID := int(game.GetSeasonId())
	m.SetSeasonID(gameSeasonID)
	gameShow := int(game.GetShow())
	m.SetShow(gameShow)
	gameTapeDate := runtime.ExtractTime(game.GetTapeDate())
	m.SetTapeDate(gameTapeDate)
	for _, item := range game.GetClues() {
		clues := int(item.GetId())
		m.AddClueIDs(clues)
	}
	if game.GetSeason() != nil {
		gameSeason := int(game.GetSeason().GetId())
		m.SetSeasonID(gameSeason)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGame(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements GameServiceServer.Delete
func (svc *GameService) Delete(ctx context.Context, req *DeleteGameRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Game.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements GameServiceServer.List
func (svc *GameService) List(ctx context.Context, req *ListGameRequest) (*ListGameResponse, error) {
	var (
		err      error
		entList  []*ent.Game
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Game.Query().
		Order(ent.Desc(game.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(game.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListGameRequest_VIEW_UNSPECIFIED, ListGameRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListGameRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithClues(func(query *ent.ClueQuery) {
				query.Select(clue.FieldID)
			}).
			WithSeason(func(query *ent.SeasonQuery) {
				query.Select(season.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoGameList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListGameResponse{
			GameList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements GameServiceServer.BatchCreate
func (svc *GameService) BatchCreate(ctx context.Context, req *BatchCreateGamesRequest) (*BatchCreateGamesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.GameCreate, len(requests))
	for i, req := range requests {
		game := req.GetGame()
		var err error
		bulk[i], err = svc.createBuilder(game)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Game.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoGameList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateGamesResponse{
			Games: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *GameService) createBuilder(game *Game) (*ent.GameCreate, error) {
	m := svc.client.Game.Create()
	gameAirDate := runtime.ExtractTime(game.GetAirDate())
	m.SetAirDate(gameAirDate)
	gameSeasonID := int(game.GetSeasonId())
	m.SetSeasonID(gameSeasonID)
	gameShow := int(game.GetShow())
	m.SetShow(gameShow)
	gameTapeDate := runtime.ExtractTime(game.GetTapeDate())
	m.SetTapeDate(gameTapeDate)
	for _, item := range game.GetClues() {
		clues := int(item.GetId())
		m.AddClueIDs(clues)
	}
	if game.GetSeason() != nil {
		gameSeason := int(game.GetSeason().GetId())
		m.SetSeasonID(gameSeason)
	}
	return m, nil
}
