// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/jepp/internal/ent/game"
	"github.com/ecshreve/jepp/internal/ent/season"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Show holds the value of the "show" field.
	Show int `json:"show,omitempty"`
	// AirDate holds the value of the "airDate" field.
	AirDate time.Time `json:"airDate,omitempty"`
	// TapeDate holds the value of the "tapeDate" field.
	TapeDate time.Time `json:"tapeDate,omitempty"`
	// SeasonID holds the value of the "season_id" field.
	SeasonID int `json:"season_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges        GameEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// Season holds the value of the season edge.
	Season *Season `json:"season,omitempty"`
	// Clues holds the value of the clues edge.
	Clues []*Clue `json:"clues,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedClues map[string][]*Clue
}

// SeasonOrErr returns the Season value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) SeasonOrErr() (*Season, error) {
	if e.loadedTypes[0] {
		if e.Season == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: season.Label}
		}
		return e.Season, nil
	}
	return nil, &NotLoadedError{edge: "season"}
}

// CluesOrErr returns the Clues value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) CluesOrErr() ([]*Clue, error) {
	if e.loadedTypes[1] {
		return e.Clues, nil
	}
	return nil, &NotLoadedError{edge: "clues"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID, game.FieldShow, game.FieldSeasonID:
			values[i] = new(sql.NullInt64)
		case game.FieldAirDate, game.FieldTapeDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldShow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show", values[i])
			} else if value.Valid {
				ga.Show = int(value.Int64)
			}
		case game.FieldAirDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field airDate", values[i])
			} else if value.Valid {
				ga.AirDate = value.Time
			}
		case game.FieldTapeDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tapeDate", values[i])
			} else if value.Valid {
				ga.TapeDate = value.Time
			}
		case game.FieldSeasonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field season_id", values[i])
			} else if value.Valid {
				ga.SeasonID = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Game.
// This includes values selected through modifiers, order, etc.
func (ga *Game) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QuerySeason queries the "season" edge of the Game entity.
func (ga *Game) QuerySeason() *SeasonQuery {
	return NewGameClient(ga.config).QuerySeason(ga)
}

// QueryClues queries the "clues" edge of the Game entity.
func (ga *Game) QueryClues() *ClueQuery {
	return NewGameClient(ga.config).QueryClues(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return NewGameClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("show=")
	builder.WriteString(fmt.Sprintf("%v", ga.Show))
	builder.WriteString(", ")
	builder.WriteString("airDate=")
	builder.WriteString(ga.AirDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tapeDate=")
	builder.WriteString(ga.TapeDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("season_id=")
	builder.WriteString(fmt.Sprintf("%v", ga.SeasonID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedClues returns the Clues named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ga *Game) NamedClues(name string) ([]*Clue, error) {
	if ga.Edges.namedClues == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ga.Edges.namedClues[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ga *Game) appendNamedClues(name string, edges ...*Clue) {
	if ga.Edges.namedClues == nil {
		ga.Edges.namedClues = make(map[string][]*Clue)
	}
	if len(edges) == 0 {
		ga.Edges.namedClues[name] = []*Clue{}
	} else {
		ga.Edges.namedClues[name] = append(ga.Edges.namedClues[name], edges...)
	}
}

// Games is a parsable slice of Game.
type Games []*Game
