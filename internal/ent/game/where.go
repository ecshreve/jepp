// Code generated by ent, DO NOT EDIT.

package game

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ecshreve/jepp/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldID, id))
}

// Show applies equality check predicate on the "show" field. It's identical to ShowEQ.
func Show(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldShow, v))
}

// AirDate applies equality check predicate on the "airDate" field. It's identical to AirDateEQ.
func AirDate(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldAirDate, v))
}

// TapeDate applies equality check predicate on the "tapeDate" field. It's identical to TapeDateEQ.
func TapeDate(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldTapeDate, v))
}

// SeasonID applies equality check predicate on the "season_id" field. It's identical to SeasonIDEQ.
func SeasonID(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldSeasonID, v))
}

// ShowEQ applies the EQ predicate on the "show" field.
func ShowEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldShow, v))
}

// ShowNEQ applies the NEQ predicate on the "show" field.
func ShowNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldShow, v))
}

// ShowIn applies the In predicate on the "show" field.
func ShowIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldShow, vs...))
}

// ShowNotIn applies the NotIn predicate on the "show" field.
func ShowNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldShow, vs...))
}

// ShowGT applies the GT predicate on the "show" field.
func ShowGT(v int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldShow, v))
}

// ShowGTE applies the GTE predicate on the "show" field.
func ShowGTE(v int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldShow, v))
}

// ShowLT applies the LT predicate on the "show" field.
func ShowLT(v int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldShow, v))
}

// ShowLTE applies the LTE predicate on the "show" field.
func ShowLTE(v int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldShow, v))
}

// AirDateEQ applies the EQ predicate on the "airDate" field.
func AirDateEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldAirDate, v))
}

// AirDateNEQ applies the NEQ predicate on the "airDate" field.
func AirDateNEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldAirDate, v))
}

// AirDateIn applies the In predicate on the "airDate" field.
func AirDateIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldAirDate, vs...))
}

// AirDateNotIn applies the NotIn predicate on the "airDate" field.
func AirDateNotIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldAirDate, vs...))
}

// AirDateGT applies the GT predicate on the "airDate" field.
func AirDateGT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldAirDate, v))
}

// AirDateGTE applies the GTE predicate on the "airDate" field.
func AirDateGTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldAirDate, v))
}

// AirDateLT applies the LT predicate on the "airDate" field.
func AirDateLT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldAirDate, v))
}

// AirDateLTE applies the LTE predicate on the "airDate" field.
func AirDateLTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldAirDate, v))
}

// TapeDateEQ applies the EQ predicate on the "tapeDate" field.
func TapeDateEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldTapeDate, v))
}

// TapeDateNEQ applies the NEQ predicate on the "tapeDate" field.
func TapeDateNEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldTapeDate, v))
}

// TapeDateIn applies the In predicate on the "tapeDate" field.
func TapeDateIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldTapeDate, vs...))
}

// TapeDateNotIn applies the NotIn predicate on the "tapeDate" field.
func TapeDateNotIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldTapeDate, vs...))
}

// TapeDateGT applies the GT predicate on the "tapeDate" field.
func TapeDateGT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldTapeDate, v))
}

// TapeDateGTE applies the GTE predicate on the "tapeDate" field.
func TapeDateGTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldTapeDate, v))
}

// TapeDateLT applies the LT predicate on the "tapeDate" field.
func TapeDateLT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldTapeDate, v))
}

// TapeDateLTE applies the LTE predicate on the "tapeDate" field.
func TapeDateLTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldTapeDate, v))
}

// SeasonIDEQ applies the EQ predicate on the "season_id" field.
func SeasonIDEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldSeasonID, v))
}

// SeasonIDNEQ applies the NEQ predicate on the "season_id" field.
func SeasonIDNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldSeasonID, v))
}

// SeasonIDIn applies the In predicate on the "season_id" field.
func SeasonIDIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldSeasonID, vs...))
}

// SeasonIDNotIn applies the NotIn predicate on the "season_id" field.
func SeasonIDNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldSeasonID, vs...))
}

// HasSeason applies the HasEdge predicate on the "season" edge.
func HasSeason() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeasonWith applies the HasEdge predicate on the "season" edge with a given conditions (other predicates).
func HasSeasonWith(preds ...predicate.Season) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newSeasonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClues applies the HasEdge predicate on the "clues" edge.
func HasClues() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CluesTable, CluesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCluesWith applies the HasEdge predicate on the "clues" edge with a given conditions (other predicates).
func HasCluesWith(preds ...predicate.Clue) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newCluesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		p(s.Not())
	})
}
