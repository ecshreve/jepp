// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/ecshreve/jepp/internal/ent"

func NewCategoryList(e *ent.Category) *CategoryList {
	if e == nil {
		return nil
	}
	var ret CategoryList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewCategoryLists(es []*ent.Category) []CategoryList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CategoryList, len(es))
	for i, e := range es {
		r[i] = NewCategoryList(e).Elem()
	}
	return r
}

func (c *CategoryList) Elem() CategoryList {
	if c == nil {
		return CategoryList{}
	}
	return *c
}

func NewCategoryRead(e *ent.Category) *CategoryRead {
	if e == nil {
		return nil
	}
	var ret CategoryRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewCategoryReads(es []*ent.Category) []CategoryRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CategoryRead, len(es))
	for i, e := range es {
		r[i] = NewCategoryRead(e).Elem()
	}
	return r
}

func (c *CategoryRead) Elem() CategoryRead {
	if c == nil {
		return CategoryRead{}
	}
	return *c
}

func NewCategoryCluesList(e *ent.Clue) *CategoryCluesList {
	if e == nil {
		return nil
	}
	var ret CategoryCluesList
	ret.ID = e.ID
	ret.Question = e.Question
	ret.Answer = e.Answer
	ret.CategoryID = e.CategoryID
	ret.GameID = e.GameID
	return &ret
}

func NewCategoryCluesLists(es []*ent.Clue) []CategoryCluesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CategoryCluesList, len(es))
	for i, e := range es {
		r[i] = NewCategoryCluesList(e).Elem()
	}
	return r
}

func (c *CategoryCluesList) Elem() CategoryCluesList {
	if c == nil {
		return CategoryCluesList{}
	}
	return *c
}

func NewClueList(e *ent.Clue) *ClueList {
	if e == nil {
		return nil
	}
	var ret ClueList
	ret.ID = e.ID
	ret.Question = e.Question
	ret.Answer = e.Answer
	ret.CategoryID = e.CategoryID
	ret.GameID = e.GameID
	return &ret
}

func NewClueLists(es []*ent.Clue) []ClueList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClueList, len(es))
	for i, e := range es {
		r[i] = NewClueList(e).Elem()
	}
	return r
}

func (c *ClueList) Elem() ClueList {
	if c == nil {
		return ClueList{}
	}
	return *c
}

func NewClueRead(e *ent.Clue) *ClueRead {
	if e == nil {
		return nil
	}
	var ret ClueRead
	ret.ID = e.ID
	ret.Question = e.Question
	ret.Answer = e.Answer
	ret.CategoryID = e.CategoryID
	ret.GameID = e.GameID
	return &ret
}

func NewClueReads(es []*ent.Clue) []ClueRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ClueRead, len(es))
	for i, e := range es {
		r[i] = NewClueRead(e).Elem()
	}
	return r
}

func (c *ClueRead) Elem() ClueRead {
	if c == nil {
		return ClueRead{}
	}
	return *c
}

func NewGameList(e *ent.Game) *GameList {
	if e == nil {
		return nil
	}
	var ret GameList
	ret.ID = e.ID
	ret.Show = e.Show
	ret.AirDate = e.AirDate
	ret.TapeDate = e.TapeDate
	ret.SeasonID = e.SeasonID
	return &ret
}

func NewGameLists(es []*ent.Game) []GameList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GameList, len(es))
	for i, e := range es {
		r[i] = NewGameList(e).Elem()
	}
	return r
}

func (ga *GameList) Elem() GameList {
	if ga == nil {
		return GameList{}
	}
	return *ga
}

func NewGameRead(e *ent.Game) *GameRead {
	if e == nil {
		return nil
	}
	var ret GameRead
	ret.ID = e.ID
	ret.Show = e.Show
	ret.AirDate = e.AirDate
	ret.TapeDate = e.TapeDate
	ret.SeasonID = e.SeasonID
	return &ret
}

func NewGameReads(es []*ent.Game) []GameRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]GameRead, len(es))
	for i, e := range es {
		r[i] = NewGameRead(e).Elem()
	}
	return r
}

func (ga *GameRead) Elem() GameRead {
	if ga == nil {
		return GameRead{}
	}
	return *ga
}

func NewGameCluesList(e *ent.Clue) *GameCluesList {
	if e == nil {
		return nil
	}
	var ret GameCluesList
	ret.ID = e.ID
	ret.Question = e.Question
	ret.Answer = e.Answer
	ret.CategoryID = e.CategoryID
	ret.GameID = e.GameID
	return &ret
}

func NewGameCluesLists(es []*ent.Clue) []GameCluesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GameCluesList, len(es))
	for i, e := range es {
		r[i] = NewGameCluesList(e).Elem()
	}
	return r
}

func (c *GameCluesList) Elem() GameCluesList {
	if c == nil {
		return GameCluesList{}
	}
	return *c
}

func NewSeasonList(e *ent.Season) *SeasonList {
	if e == nil {
		return nil
	}
	var ret SeasonList
	ret.ID = e.ID
	ret.Number = e.Number
	ret.StartDate = e.StartDate
	ret.EndDate = e.EndDate
	return &ret
}

func NewSeasonLists(es []*ent.Season) []SeasonList {
	if len(es) == 0 {
		return nil
	}
	r := make([]SeasonList, len(es))
	for i, e := range es {
		r[i] = NewSeasonList(e).Elem()
	}
	return r
}

func (s *SeasonList) Elem() SeasonList {
	if s == nil {
		return SeasonList{}
	}
	return *s
}

func NewSeasonRead(e *ent.Season) *SeasonRead {
	if e == nil {
		return nil
	}
	var ret SeasonRead
	ret.ID = e.ID
	ret.Number = e.Number
	ret.StartDate = e.StartDate
	ret.EndDate = e.EndDate
	return &ret
}

func NewSeasonReads(es []*ent.Season) []SeasonRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]SeasonRead, len(es))
	for i, e := range es {
		r[i] = NewSeasonRead(e).Elem()
	}
	return r
}

func (s *SeasonRead) Elem() SeasonRead {
	if s == nil {
		return SeasonRead{}
	}
	return *s
}

func NewSeasonGamesList(e *ent.Game) *SeasonGamesList {
	if e == nil {
		return nil
	}
	var ret SeasonGamesList
	ret.ID = e.ID
	ret.Show = e.Show
	ret.AirDate = e.AirDate
	ret.TapeDate = e.TapeDate
	ret.SeasonID = e.SeasonID
	return &ret
}

func NewSeasonGamesLists(es []*ent.Game) []SeasonGamesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]SeasonGamesList, len(es))
	for i, e := range es {
		r[i] = NewSeasonGamesList(e).Elem()
	}
	return r
}

func (ga *SeasonGamesList) Elem() SeasonGamesList {
	if ga == nil {
		return SeasonGamesList{}
	}
	return *ga
}
