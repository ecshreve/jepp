// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ecshreve/jepp/internal/ent/season"
)

// Season is the model entity for the Season schema.
type Season struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// StartDate holds the value of the "startDate" field.
	StartDate time.Time `json:"startDate,omitempty"`
	// EndDate holds the value of the "endDate" field.
	EndDate time.Time `json:"endDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeasonQuery when eager-loading is set.
	Edges        SeasonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeasonEdges holds the relations/edges for other nodes in the graph.
type SeasonEdges struct {
	// Games holds the value of the games edge.
	Games []*Game `json:"games,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool

	namedGames map[string][]*Game
}

// GamesOrErr returns the Games value or an error if the edge
// was not loaded in eager-loading.
func (e SeasonEdges) GamesOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Games, nil
	}
	return nil, &NotLoadedError{edge: "games"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Season) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case season.FieldID, season.FieldNumber:
			values[i] = new(sql.NullInt64)
		case season.FieldStartDate, season.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Season fields.
func (s *Season) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case season.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case season.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				s.Number = int(value.Int64)
			}
		case season.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startDate", values[i])
			} else if value.Valid {
				s.StartDate = value.Time
			}
		case season.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endDate", values[i])
			} else if value.Valid {
				s.EndDate = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Season.
// This includes values selected through modifiers, order, etc.
func (s *Season) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryGames queries the "games" edge of the Season entity.
func (s *Season) QueryGames() *GameQuery {
	return NewSeasonClient(s.config).QueryGames(s)
}

// Update returns a builder for updating this Season.
// Note that you need to call Season.Unwrap() before calling this method if this Season
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Season) Update() *SeasonUpdateOne {
	return NewSeasonClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Season entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Season) Unwrap() *Season {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Season is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Season) String() string {
	var builder strings.Builder
	builder.WriteString("Season(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", s.Number))
	builder.WriteString(", ")
	builder.WriteString("startDate=")
	builder.WriteString(s.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endDate=")
	builder.WriteString(s.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedGames returns the Games named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Season) NamedGames(name string) ([]*Game, error) {
	if s.Edges.namedGames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedGames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Season) appendNamedGames(name string, edges ...*Game) {
	if s.Edges.namedGames == nil {
		s.Edges.namedGames = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		s.Edges.namedGames[name] = []*Game{}
	} else {
		s.Edges.namedGames[name] = append(s.Edges.namedGames[name], edges...)
	}
}

// Seasons is a parsable slice of Season.
type Seasons []*Season
