package gqlserver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/ecshreve/jepp/internal/ent"
	gqlserver "github.com/ecshreve/jepp/internal/gqlserver/gen"
	"github.com/ecshreve/jepp/internal/utils"
)

// Clues is the resolver for the clues field.
func (r *categoryResolver) Clues(ctx context.Context, obj *ent.Category, pager *gqlserver.PaginationParams, where *ent.ClueWhereInput, orderBy *ent.ClueOrder) (*ent.ClueConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Category.QueryClues(obj).
		Paginate(ctx, a, f, b, l,
			ent.WithClueFilter(where.Filter),
			ent.WithClueOrder(orderBy),
		)
}

// Clues is the resolver for the clues field.
func (r *gameResolver) Clues(ctx context.Context, obj *ent.Game, pager *gqlserver.PaginationParams, where *ent.ClueWhereInput, orderBy *ent.ClueOrder) (*ent.ClueConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Game.QueryClues(obj).
		Paginate(ctx, a, f, b, l,
			ent.WithClueFilter(where.Filter),
			ent.WithClueOrder(orderBy),
		)
}

// Seasons is the resolver for the seasons field.
func (r *queryResolver) Seasons(ctx context.Context, pager *gqlserver.PaginationParams, where *ent.SeasonWhereInput, orderBy *ent.SeasonOrder) (*ent.SeasonConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Season.Query().
		Paginate(ctx, a, f, b, l,
			ent.WithSeasonFilter(where.Filter),
			ent.WithSeasonOrder(orderBy),
		)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, pager *gqlserver.PaginationParams, where *ent.CategoryWhereInput, orderBy *ent.CategoryOrder) (*ent.CategoryConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Category.Query().
		Paginate(ctx, a, f, b, l,
			ent.WithCategoryFilter(where.Filter),
			ent.WithCategoryOrder(orderBy),
		)
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context, pager *gqlserver.PaginationParams, where *ent.GameWhereInput, orderBy *ent.GameOrder) (*ent.GameConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Game.Query().
		Paginate(ctx, a, f, b, l,
			ent.WithGameFilter(where.Filter),
			ent.WithGameOrder(orderBy),
		)
}

// Clues is the resolver for the clues field.
func (r *queryResolver) Clues(ctx context.Context, pager *gqlserver.PaginationParams, where *ent.ClueWhereInput, orderBy *ent.ClueOrder) (*ent.ClueConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Clue.Query().
		Paginate(ctx, a, f, b, l,
			ent.WithClueFilter(where.Filter),
			ent.WithClueOrder(orderBy),
		)
}

// Games is the resolver for the games field.
func (r *seasonResolver) Games(ctx context.Context, obj *ent.Season, pager *gqlserver.PaginationParams, where *ent.GameWhereInput, orderBy *ent.GameOrder) (*ent.GameConnection, error) {
	a, f, b, l := utils.JeppPagerToEntPager(pager)
	return r.client.Season.QueryGames(obj).
		Paginate(ctx, a, f, b, l,
			ent.WithGameFilter(where.Filter),
			ent.WithGameOrder(orderBy),
		)
}
