package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/ecshreve/jepp/graphql/models"
	gqlserver "github.com/ecshreve/jepp/graphql/server/generated"
)

// Clues is the resolver for the clues field.
func (r *categoryResolver) Clues(ctx context.Context, obj *models.Category) ([]*models.Clue, error) {
	var clues []*models.Clue
	if err := r.DB.Where("category_id = ?", obj.ID).Find(&clues).Error; err != nil {
		return nil, err
	}

	return clues, nil
}

// Category is the resolver for the category field.
func (r *clueResolver) Category(ctx context.Context, obj *models.Clue) (*models.Category, error) {
	var category models.Category
	if err := r.DB.First(&category, obj.CategoryID).Error; err != nil {
		return nil, err
	}

	return &category, nil
}

// Game is the resolver for the game field.
func (r *clueResolver) Game(ctx context.Context, obj *models.Clue) (*models.Game, error) {
	var game models.Game
	if err := r.DB.First(&game, obj.GameID).Error; err != nil {
		return nil, err
	}

	return &game, nil
}

// Season is the resolver for the season field.
func (r *gameResolver) Season(ctx context.Context, obj *models.Game) (*models.Season, error) {
	var season models.Season
	if err := r.DB.First(&season, obj.SeasonID).Error; err != nil {
		return nil, err
	}

	return &season, nil
}

// Clues is the resolver for the clues field.
func (r *gameResolver) Clues(ctx context.Context, obj *models.Game) ([]*models.Clue, error) {
	var clues []*models.Clue
	if err := r.DB.Where("game_id = ?", obj.ID).Find(&clues).Error; err != nil {
		return nil, err
	}

	return clues, nil
}

// Games is the resolver for the games field.
func (r *seasonResolver) Games(ctx context.Context, obj *models.Season) ([]*models.Game, error) {
	var games []*models.Game
	if err := r.DB.Where("season_id = ?", obj.ID).Find(&games).Error; err != nil {
		return nil, err
	}

	return games, nil
}

// Category returns gqlserver.CategoryResolver implementation.
func (r *Resolver) Category() gqlserver.CategoryResolver { return &categoryResolver{r} }

// Clue returns gqlserver.ClueResolver implementation.
func (r *Resolver) Clue() gqlserver.ClueResolver { return &clueResolver{r} }

// Game returns gqlserver.GameResolver implementation.
func (r *Resolver) Game() gqlserver.GameResolver { return &gameResolver{r} }

// Season returns gqlserver.SeasonResolver implementation.
func (r *Resolver) Season() gqlserver.SeasonResolver { return &seasonResolver{r} }

type categoryResolver struct{ *Resolver }
type clueResolver struct{ *Resolver }
type gameResolver struct{ *Resolver }
type seasonResolver struct{ *Resolver }
